#include <Arduino.h>
#include <FastLED.h>
#include "modules/twinkle.h"
#include "modules/ocean.h"
#include "modules/music_visualisation.h"
#include "modules/user_interface.h"
#include "led_config.h"

#include "tools/filters.h"
#include "tools/loop_timer.h"
#include "wifi_handler.h"
#include "github_update.h"
#include "memory_module.h"
#include "ram_log.h"

// debug and system control options
#define DEBUG_DISPLAY_LOOP_FRQ          // use this to output the loop freq in hz via serial print
#define SYSCTRL_LOOPTIMER               // enable loop frequency control, remember to also set the loop freq in the loop_timer.h

// create the FastLED array containing led colors

// declare a bunch of memory for the led colours
LED_MUSHROOMS_SET_t led_array_set_real;         // this one contains the values that get send to the leds
LED_MUSHROOMS_SET_t led_array_set_current;      // this here will contain the values generated by the current module
LED_MUSHROOMS_SET_t led_array_set_next;         // and this one will contain the values of the next module


uint8_t blend_opacity = 255;
uint8_t module_index_next;
uint8_t module_index_current;

#define EFFECT_MODULE_NUM                     3

void animations_update(LED_MUSHROOMS_SET_t *set) {
    twinkle_update(reinterpret_cast<CRGBSet &>(*reinterpret_cast<CRGB *>(&set->leds_largeshrooms_left)));
    twinkle_update(reinterpret_cast<CRGBSet &>(*reinterpret_cast<CRGB *>(&set->leds_largeshrooms_right)));
    ocean_update(reinterpret_cast<CRGBSet &>(*reinterpret_cast<CRGB *>(&set->leds_whiteshrooms)));
    twinkle_update(reinterpret_cast<CRGBSet &>(*reinterpret_cast<CRGB *>(&set->leds_redshrooms_left)));
    twinkle_update(reinterpret_cast<CRGBSet &>(*reinterpret_cast<CRGB *>(&set->leds_redshrooms_right)));
}

void blackout_update(LED_MUSHROOMS_SET_t *set) {
    set->leds_redshrooms_left = CRGB::Black;
    set->leds_largeshrooms_right = CRGB::Black;
    set->leds_whiteshrooms = CRGB::Black;
    set->leds_redshrooms_left = CRGB::Black;
    set->leds_redshrooms_right = CRGB::Black;
}

void (*module_update[EFFECT_MODULE_NUM])(LED_MUSHROOMS_SET_t *set) = {
        animations_update,
        music_vis_update,
        blackout_update
};

void setup() {
    delay(1000);
    uint8_t retval;
    // Setup USB comm + Web-serial
    DualSerial.begin(115200);

    /* --------***** LEGACY *****----------------
    // init eeprom flash
    DualSerial.println("Initializing memory");
    if ((retval = memory_module_init()) != MEMORY_MODULE_ERROR_NO_ERROR) {
        ram_log_notify(RAM_LOG_ERROR_MEMORY, retval);
        DualSerial.println("Error");
    }


    // initialize effect modules
    twinkle_init();
    music_vis_init();

    //start up FastLED object
    FastLED.addLeds<LED_TYPE, LED_PIN_BASS_1, COLOR_ORDER>(led_array_set_real.leds_largeshrooms_left,
                                                           LED_NUM_BASS_1).setCorrection(
                                                            TypicalLEDStrip);
    FastLED.addLeds<LED_TYPE, LED_PIN_BASS_2, COLOR_ORDER>(led_array_set_real.leds_largeshrooms_right,
                                                           LED_NUM_BASS_2).setCorrection(
                                                            TypicalLEDStrip);
    FastLED.addLeds<LED_TYPE, LED_PIN_MID, COLOR_ORDER>(led_array_set_real.leds_whiteshrooms,
                                                        LED_NUM_MID).setCorrection(TypicalLEDStrip);
    FastLED.addLeds<LED_TYPE, LED_PIN_TREBLE_1, COLOR_ORDER>(led_array_set_real.leds_redshrooms_left,
                                                             LED_NUM_TREBLE_1).setCorrection(
                                                                     TypicalLEDStrip);
    FastLED.addLeds<LED_TYPE, LED_PIN_TREBLE_2, COLOR_ORDER>(led_array_set_real.leds_redshrooms_right,
                                                             LED_NUM_TREBLE_2).setCorrection(
                                                                     TypicalLEDStrip);
    */

    // Wi-Fi setup
    DualSerial.println("Starting Wifi...");

    retval = wifi_handler_init("Magic Light Organ", "Light Organ ");

    if (retval != WIFI_HANDLER_ERROR_NO_ERROR)
        ram_log_notify(RAM_LOG_ERROR_WIFI_HANDLER, retval);
}


void loop() {
    // save t_0 time stamp in loop_timer
    t_0 = micros();

    // run wifi update routine
    wifi_handler_update();

    /*
    module_update[module_index_next](&led_array_set_next);
    module_update[module_index_current](&led_array_set_current);


    blend(led_array_set_current.leds_largeshrooms_left, led_array_set_next.leds_largeshrooms_left,
          led_array_set_real.leds_largeshrooms_left, LED_NUM_BASS_1,
          blend_opacity);
    blend(led_array_set_current.leds_largeshrooms_right, led_array_set_next.leds_largeshrooms_right,
          led_array_set_real.leds_largeshrooms_right, LED_NUM_BASS_2,
          blend_opacity);
    blend(led_array_set_current.leds_whiteshrooms, led_array_set_next.leds_whiteshrooms,
          led_array_set_real.leds_whiteshrooms, LED_NUM_MID,
          blend_opacity);
    blend(led_array_set_current.leds_redshrooms_left, led_array_set_next.leds_redshrooms_left,
          led_array_set_real.leds_redshrooms_left, LED_NUM_TREBLE_1,
          blend_opacity);
    blend(led_array_set_current.leds_redshrooms_right, led_array_set_next.leds_redshrooms_right,
          led_array_set_real.leds_redshrooms_right, LED_NUM_TREBLE_2,
          blend_opacity);

    module_update[module_index_current](&led_array_set_real);

    if (blend_opacity <= 254) {
        blend_opacity++;
    }

    // execute led colors
    FastLED.show();
*/


    ui_serial_comm_handler();

    loop_timer++;

#ifdef DEBUG_DISPLAY_LOOP_FRQ
    EVERY_N_SECONDS (5) {
        // calculate the loop time and print. serial comm only decreases loop freq when serial.print is called
        DualSerial.print("loop freq in Hz: ");
        DualSerial.println(loop_timer_get_loop_freq());
    }
#endif

#ifdef SYSCTRL_LOOPTIMER
    // keep loop at constant cycle frequency
    loop_timer_check_cycle_freq();
#endif


}
    